def print_params(a=1, b='строка', c=True): #Значения по умолчанию

    print(a, b, c) #Использование параметров по умолчанию позволяет функциям быть гибкими и удобными в использовании.

print_params()  # Вызов без аргументов, поэтому появится значения по умолчанию
print_params(2024)  # Вызов с одним аргументом (только а) остальные по умолчанию
print_params(25, 'тест')  # Вызов с двумя аргументами (a b) с по умолчанию
print_params(b=25)  # Вызов с именованным аргументом (b) a и c по умолчанию
print_params(c=[1, 2, 3])  # Вызов с именованным аргументом

# Распаковка параметров
values_list = [20, 'октябрь', False] #список с 3 разными элементами
values_dict = {'a': 2077, 'b': 'Ереван', 'c': None} #словарь с ключами соответствующие именам параметров функции

#Распаковка параметров из списка и словаря позволяет передавать группы значений в функцию, что упрощает работу с данными.

# Передача списка и словаря в функцию с распаковкой
print_params(*values_list)  # Распаковка списка как позиционные аргументы
print_params(**values_dict)  # Распаковка словаря как именованные аргументы

# Распаковка + отдельные параметры
values_list_2 = [54.32, 'Строка'] #2 список с двумя элементами
print_params(*values_list_2, 42)  # Распаковка списка и передача 42 как 3 аргумента, 54 = a Строка =b 42 = c